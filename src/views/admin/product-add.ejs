<%- include("../../views/partials/admin/headers") %>
<%- include("../../views/partials/admin/slidebar") %>

<link href="https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
   /* Dark Theme with Neon Accents */
:root {
  --bg-dark: #121212;
  --bg-card: #1e1e1e;
  --text-primary: #e0e0e0;
  --text-secondary: #b0b0b0;
  --neon-primary: #0cffe1;
  --neon-secondary: #ff36f7;
  --neon-accent: #ffde03;
  --neon-glow: 0 0 10px;
  --input-bg: #2d2d2d;
  --danger: #ff5370;
  --success: #c3e88d;
}

body {
  background-color: var(--bg-dark);
  color: var(--text-primary);
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  transition: all 0.3s ease;
}

.container {
  background-color: var(--bg-dark);
  border-radius: 10px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
  padding: 30px;
}

/* Headings */
h3, h4 {
  color: var(--neon-primary);
  text-shadow: var(--neon-glow) var(--neon-primary);
  font-weight: 600;
  letter-spacing: 1px;
  margin-bottom: 1.5rem;
  border-bottom: 1px solid rgba(12, 255, 225, 0.3);
  padding-bottom: 10px;
}

/* Form Controls */
.form-control, .form-select {
  background-color: var(--input-bg);
  border: 1px solid #444;
  color: var(--text-primary);
  border-radius: 6px;
  transition: all 0.3s ease;
}

.form-control:focus, .form-select:focus {
  background-color: var(--input-bg);
  border-color: var(--neon-primary);
  box-shadow: 0 0 0 0.2rem rgba(12, 255, 225, 0.25);
  color: var(--text-primary);
}

.form-control::placeholder {
  color: var(--text-secondary);
  opacity: 0.7;
}

/* Labels */
.form-label {
  color: var(--neon-accent);
  font-weight: 500;
  margin-bottom: 0.5rem;
}

/* Buttons */
.btn-primary {
  background: linear-gradient(135deg, var(--neon-primary), #00a3c4);
  border: none;
  color: #000;
  font-weight: 600;
  padding: 10px 20px;
  border-radius: 6px;
  transition: all 0.3s ease;
  box-shadow: 0 0 10px rgba(12, 255, 225, 0.5);
}

.btn-primary:hover, .btn-primary:focus {
  background: linear-gradient(135deg, #00d8c0, var(--neon-primary));
  transform: translateY(-2px);
  box-shadow: 0 0 15px rgba(12, 255, 225, 0.7);
}

.btn-secondary {
  background: linear-gradient(135deg, #7f7fd5, #86a8e7);
  border: none;
  color: #fff;
  font-weight: 600;
  padding: 8px 16px;
  border-radius: 6px;
  transition: all 0.3s ease;
}

.btn-secondary:hover, .btn-secondary:focus {
  background: linear-gradient(135deg, #86a8e7, #7f7fd5);
  transform: translateY(-2px);
  box-shadow: 0 0 10px rgba(134, 168, 231, 0.5);
}

.btn-danger {
  background: linear-gradient(135deg, var(--danger), #ff8a80);
  border: none;
  color: #fff;
  padding: 6px 12px;
  border-radius: 6px;
  transition: all 0.3s ease;
}

.btn-danger:hover, .btn-danger:focus {
  background: linear-gradient(135deg, #ff8a80, var(--danger));
  transform: translateY(-1px);
}

/* Cards */
.card {
  background-color: var(--bg-card);
  border: 1px solid #333;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}

.card-header {
  background-color: rgba(0, 0, 0, 0.2);
  border-bottom: 1px solid #333;
  padding: 15px;
}

.card-body {
  padding: 20px;
}

/* Error Messages */
.error-message {
  color: var(--danger);
  font-size: 0.85rem;
  margin-top: 5px;
}

/* Shade Variants Section */
.shade-entry {
  background-color: rgba(0, 0, 0, 0.2);
  padding: 15px;
  border-radius: 8px;
  border-left: 3px solid var(--neon-secondary);
}

/* Image Containers */
.thumbnails-container {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  padding: 15px;
  background-color: rgba(0, 0, 0, 0.2);
  border-radius: 8px;
}

.image-cropper {
  background-color: rgba(0, 0, 0, 0.3);
  padding: 10px;
  border-radius: 8px;
  margin-top: 10px;
}

/* Image Previews */
#imgView1, #imgView2, #imgView3, #imgView4, 
#croppedImg1, #croppedImg2, #croppedImg3, #croppedImg4 {
  border: 2px dashed #444;
  border-radius: 8px;
  padding: 5px;
  max-height: 150px;
  background-color: #2d2d2d;
}

/* Neon Glow Effects */
#productForm {
  margin-top: 30px;
  background: linear-gradient(135deg, var(--neon-secondary), #b521ff);
  color: #fff;
  font-weight: bold;
  letter-spacing: 1px;
  padding: 12px 30px;
  border-radius: 8px;
  box-shadow: 0 0 15px rgba(255, 54, 247, 0.5);
  transition: all 0.3s ease;
}

#productForm:hover {
  background: linear-gradient(135deg, #b521ff, var(--neon-secondary));
  transform: translateY(-3px);
  box-shadow: 0 0 20px rgba(255, 54, 247, 0.7);
}

/* Input File Styling */
input[type="file"] {
  background-color: var(--input-bg);
  padding: 10px;
  color: var(--text-secondary);
}

input[type="file"]::-webkit-file-upload-button {
  background: linear-gradient(135deg, var(--neon-accent), #ffa600);
  border: none;
  border-radius: 4px;
  color: #000;
  padding: 8px 16px;
  margin-right: 10px;
  cursor: pointer;
  transition: all 0.3s ease;
}

/* Responsive Improvements */
@media (max-width: 768px) {
  .container {
    padding: 15px;
  }
  
  .btn {
    width: 100%;
    margin-bottom: 10px;
  }
}
</style>

<div class="d-flex flex-column flex-grow-1 content" style="    margin-top: 41px;">
    <div class="container mt-4">
        <h3 class="mb-4">Add Product</h3>
        <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()">
            <div class="mb-3">
                <label for="productName" class="form-label">Product Name</label>
                <input type="text" class="form-control" name="productName" id="product_name" placeholder="Enter product name">
                <div id="productName-error" class="error-message"></div>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" name="description" id="descriptionid" rows="3" placeholder="Enter product description"></textarea>
                <div id="description-error" class="error-message"></div>
            </div>

            <div class="row g-3">
                <div class="col-md-6 col-12">
                    <label for="regularPrice" class="form-label">Regular Price</label>
                    <input type="number" class="form-control" name="regularPrice" id="regularPrice" placeholder="$ Enter regular price">
                    <div id="regularPrice-error" class="error-message"></div>
                </div>

                <div class="col-md-6 col-12">
                    <label for="salePrice" class="form-label">Sale Price</label>
                    <input type="number" class="form-control" name="salePrice" id="salePrice" placeholder="$ Enter sale price">
                    <div id="salePrice-error" class="error-message"></div>
                </div>
            </div>

            <div class="mb-3">
                <label for="quantity" class="form-label">Total Quantity</label>
                <input type="number" class="form-control" name="quantity" id="quantity" placeholder="Enter total quantity" min="0">
                <div id="quantity-error" class="error-message"></div>
            </div>

            <!-- Shade Variants -->
            <div class="col-lg-8">
                <div class="mb-4">
                    <label class="form-label">Shade Variants and Quantities</label>
                    <div id="shadesContainer">
                        <div class="shade-entry mb-3">
                            <div class="row">
                                <div class="col-md-4">
                                    <select name="shades[]" class="form-control">
                                        <option value="">Select Shade</option>
                                        <option value="Light">Light</option>
                                        <option value="Medium">Medium</option>
                                        <option value="Dark">Dark</option>
                                        <option value="Fair">Fair</option>
                                        <option value="Deep">Deep</option>
                                        <option value="Red">Red</option>
                                        <option value="Pink">Pink</option>
                                        <option value="Brown">Brown</option>
                                        <option value="Black">Black</option>
                                        <option value="Nude">Nude</option>
                                        <option value="Coral">Coral</option>
                                        <option value="Blue">Blue</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <input type="number" name="shadeQuantities[]" class="form-control" placeholder="Quantity" min="0">
                                </div>
                                <div class="col-md-2">
                                    <button type="button" class="btn btn-danger remove-shade">Remove</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="shade-quantity-error" class="error-message"></div>
                    <button type="button" class="btn btn-secondary" id="addMoreShades">Add More Shades</button>
                </div>
            </div>

            <div class="mb-3">
                <label for="category" class="form-label">Category</label>
                <select class="form-select" name="category" id="category" required>
                    <% for(let i=0 ; i <category.length ; i++) { %>
                        <option value="<%= category[i]._id%>">
                            <%=category[i].name%>
                        </option>
                    <% } %>
                </select>
                <div id="category-error" class="error-message"></div>
            </div>

            <div class="mb-3">
                <label for="status" class="form-label">Status</label>
                <select class="form-select" name="status" id="status">
                    <option value="Available">Available</option>
                    <option value="out of stock">Out of Stock</option>
                    <option value="Discountinued">Discontinued</option>
                </select>
                <div id="status-error" class="error-message"></div>
            </div>

            <div class="card mb-3">
                <div class="card-header">
                    <h4>Choose images</h4>
                </div>
                <div class="border row">
                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                </div>
                <div class="row">
                    <!-- Image inputs and cropper sections for each image -->
                    <div class="col-md-6 col-12 mb-3">
                        <div class="card-body text-center">
                            <img src="" alt="" id="imgView1" class="img-fluid mb-2">
                            <input class="form-control" type="file" name="images" id="input1" accept="image/*" onchange="validateImageFile(event), viewImage1(event), viewImage(event, 1)">
                            <div id="images-error" class="error-message"></div>
                        </div>
                        <div class="image-cropper d-flex align-items-center">
                            <img src="" id="croppedImg1" alt="">
                            <button type="button" id="saveButton1" class="btn btn-sm btn-primary">Save</button>
                        </div>
                    </div>

                    <div class="col-md-6 col-12 mb-3">
                        <div class="card-body text-center">
                            <img src="" alt="" id="imgView2" class="img-fluid mb-2">
                            <input class="form-control" type="file" name="images" id="input2" accept="image/*" onchange="validateImageFile(event), viewImage2(event), viewImage(event, 2)">
                            <div id="images-error" class="error-message"></div>
                        </div>
                        <div class="image-cropper d-flex align-items-center">
                            <img src="" id="croppedImg2" alt="">
                            <button type="button" id="saveButton2" class="btn btn-sm btn-primary">Save</button>
                        </div>
                    </div>

                    <div class="col-md-6 col-12 mb-3">
                        <div class="card-body text-center">
                            <img src="" alt="" id="imgView3" class="img-fluid mb-2">
                            <input class="form-control" type="file" name="images" id="input3" accept="image/*" onchange="validateImageFile(event), viewImage3(event), viewImage(event, 3)">
                            <div id="images-error" class="error-message"></div>
                        </div>
                        <div class="image-cropper d-flex align-items-center">
                            <img src="" id="croppedImg3" alt="">
                            <button type="button" id="saveButton3" class="btn btn-sm btn-primary">Save</button>
                        </div>
                    </div>

                    <div class="col-md-6 col-12 mb-3">
                        <div class="card-body text-center">
                            <img src="" alt="" id="imgView4" class="img-fluid mb-2">
                            <input class="form-control" type="file" name="images" id="input4" accept="image/*" onchange="validateImageFile(event), viewImage4(event), viewImage(event, 4)">
                            <div id="images-error" class="error-message"></div>
                        </div>
                        <div class="image-cropper d-flex align-items-center">
                            <img src="" id="croppedImg4" alt="">
                            <button type="button" id="saveButton4" class="btn btn-sm btn-primary">Save</button>
                        </div>
                    </div>
                </div>
            </div>

            <button type="button" id="productForm" onclick="validateAndSubmit()" class="btn btn-primary btn-block">Publish Product</button>
        </form>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.js"></script>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<script>

function validateAndSubmit() {
    if (validateForm()) {
        Swal.fire({
            icon: "success",
            title: "Product added successfully",
            showConfirmButton: false,
            timer: 1500,
        }).then(() => {
            document.forms[0].submit();
        });
    }
}


function viewImage1(event) {
    document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
}

function viewImage2(event) {
    document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
}

function viewImage3(event) {
    document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
}

function viewImage4(event) {
    document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])
}

function viewImage(event, index) {
    const input = event.target;
    const originalFile = input.files[0];

    if (!originalFile) return;

    const image = document.getElementById('imgView' + index);
    if (image.cropper) {
        image.cropper.destroy();
    }

    image.src = URL.createObjectURL(originalFile);
    image.style.display = 'block';

    const cropper = new Cropper(image, {
        aspectRatio: 0.8,
        viewMode: 2,
        guides: true,
        background: true,
        autoCropArea: 1,
        zoomable: true,
        cropBoxResizable: true,
        cropBoxMovable: true,
        dragMode: 'move',
        ready: function () {
            const cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
            cropperContainer.style.display = 'block';
        }
    });

    image.cropper = cropper;

    const saveButton = document.querySelector('#saveButton' + index);
    saveButton.onclick = async function () {
        try {
            const croppedCanvas = cropper.getCroppedCanvas({
                width: 800,
                height: 1000,
                imageSmoothingQuality: 'high'
            });

            if (!croppedCanvas) {
                throw new Error('Cropping failed');
            }

            const blob = await new Promise(resolve => croppedCanvas.toBlob(resolve, originalFile.type, 0.8));
            const croppedFile = new File([blob], originalFile.name, {
                type: originalFile.type,
                lastModified: new Date().getTime()
            });

            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(croppedFile);
            input.files = dataTransfer.files;

            const croppedImg = document.getElementById('croppedImg' + index);
            croppedImg.src = croppedCanvas.toDataURL(originalFile.type);
            croppedImg.style.display = 'block';

            image.style.display = 'none';
            cropper.destroy();
            image.cropper = null;
            saveButton.style.display = "block"

            Swal.fire({
                icon: 'success',
                title: 'Image cropped successfully',
                showConfirmButton: false,
                timer: 1500
            });

        } catch (error) {
            console.error('Cropping error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Failed to crop image. Please try again.'
            });
        }
    };
}

const selectedImages = [];
document.getElementById("imageInput")?.addEventListener("change", handleFileSelect);

function handleFileSelect(event) {
    const addedImagesContainer = document.getElementById("addedImagesContainer");
    addedImagesContainer.innerHTML = "";
    const files = event.target.files;
    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        selectedImages.push(file);
        const thumbnail = document.createElement("div");
        thumbnail.classList.add("thumbnail");
        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        img.alt = "thumbnail";
        img.style.width = "50px";
        img.style.height = "auto";
        const removeIcon = document.createElement("span");
        removeIcon.classList.add("remove-icon");
        removeIcon.innerHTML = "&times;";
        removeIcon.addEventListener("click", function () {
            const index = selectedImages.indexOf(file);
            if (index !== -1) {
                selectedImages.splice(index, 1);
            }
            thumbnail.remove();
        });
        thumbnail.appendChild(img);
        thumbnail.appendChild(removeIcon);
        addedImagesContainer.appendChild(thumbnail);
    }
}

function validateForm() {
    clearErrorMessages();
    const name = document.getElementsByName('productName')[0].value;
    const description = document.getElementById('descriptionid').value;
    const price = document.getElementsByName('regularPrice')[0].value;
    const saleprice = document.getElementsByName('salePrice')[0].value;
    const quantity = document.getElementById('quantity').value;
    const category = document.getElementsByName('category')[0].value;
    const images = document.getElementById('input1');
    
    const shadeSelects = document.querySelectorAll('select[name="shades[]"]');
    const shadeQuantityInputs = document.querySelectorAll('input[name="shadeQuantities[]"]');
    let shadesValid = true;
    
    let isValid = true;
    
    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
        isValid = false;
    }

    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) <= 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid positive price.');
        isValid = false;
    }

    if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) <= 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid positive price.');
        isValid = false;
    }
    
    if (parseFloat(price) <= parseFloat(saleprice)) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
    }

    if (quantity.trim() === "" || parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid quantity (0 or greater).');
        isValid = false;
    }

    if (images.files.length === 0) {
        displayErrorMessage("images-error", 'Please select at least one image.');
        isValid = false;
    }

    return isValid && shadesValid;
}

function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
    });
}

function validateImageFile(event) {
    const file = event.target.files[0];

    if (file) {
        const fileType = file.type;
        const validImageTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/gif', 'image/webp'];
        const maxFileSize = 10 * 1024 * 1024;

        if (!validImageTypes.includes(fileType)) {
            document.getElementById('images-error').innerText = 'Please upload a valid image file (JPEG, PNG, JPG, GIF, or WEBP).';
            event.target.value = '';
            document.getElementById('imgView1').src = '';
        }
        else if (file.size > maxFileSize) {
            document.getElementById('images-error').innerText = 'File size exceeds 10MB. Please upload a smaller image.';
            event.target.value = '';
            document.getElementById('imgView1').src = '';
        } else {
            document.getElementById('images-error').innerText = '';
        }
    }
}

document.addEventListener('DOMContentLoaded', function () {
    const shadesContainer = document.getElementById('shadesContainer');
    const addMoreShadesBtn = document.getElementById('addMoreShades');
    
    function createShadeEntry() {
        const shadeEntry = document.createElement('div');
        shadeEntry.className = 'shade-entry mb-3';
        shadeEntry.innerHTML = `
            <div class="row">
                <div class="col-md-4">
                    <select name="shades[]" class="form-control">
                        <option value="">Select Shade</option>
                        <option value="Light">Light</option>
                        <option value="Medium">Medium</option>
                        <option value="Dark">Dark</option>
                        <option value="Fair">Fair</option>
                        <option value="Deep">Deep</option>
                        <option value="Red">Red</option>
                        <option value="Pink">Pink</option>
                        <option value="Brown">Brown</option>
                        <option value="Black">Black</option>
                        <option value="Nude">Nude</option>
                        <option value="Coral">Coral</option>
                         <option value="Blue">Blue</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <input type="number" name="shadeQuantities[]" class="form-control"
                        placeholder="Quantity" min="0">
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-danger remove-shade">Remove</button>
                </div>
            </div>
        `;
        return shadeEntry;
    }
    
    if (addMoreShadesBtn) {
        addMoreShadesBtn.addEventListener('click', function () {
            shadesContainer.appendChild(createShadeEntry());
        });
    }
    
    if (shadesContainer) {
        shadesContainer.addEventListener('click', function (e) {
            if (e.target.classList.contains('remove-shade')) {
                const shadeEntry = e.target.closest('.shade-entry');
                if (shadesContainer.children.length > 1) {
                    shadeEntry.remove();
                } else {
                    alert('At least one shade entry is required.');
                }
            }
        });
    }
});
</script>